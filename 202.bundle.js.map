{"version":3,"sources":["webpack://pong-keeper/./src/global-styles.js","webpack://pong-keeper/./src/utils/validationUtils.js","webpack://pong-keeper/./src/containers/Keeper/selectors.js","webpack://pong-keeper/./src/themes/media.js","webpack://pong-keeper/./src/themes/fonts.js","webpack://pong-keeper/./src/components/CustomButton/index.js","webpack://pong-keeper/./src/components/CustomInput/index.js","webpack://pong-keeper/./src/containers/Keeper/index.js","webpack://pong-keeper/./src/themes/colors.js"],"names":["createGlobalStyle","USERNAME_VALIDATION_RULE","createRule","ruleName","ruleValue","message","pattern","isUserNameValid","requiredMsgId","invalidFullnameMsgId","selectKeeperDomain","state","Keeper","initialState","toJS","sizes","desktop","tablet","mobile","Object","keys","reduce","acc","label","min","args","css","join","replace","max","small","big","large","normal","CB","styled","Button","props","width","colors","CustomButton","data-testid","propTypes","memo","CI","Input","CustomInput","Wrapper","SketchyContainer","media","Row","center","CustomForm","Form","fonts","CustomTitle","CustomBigName","CustomLargeText","CustomXLargeText","CustomSmallText","dispatchSetPlayers","dispatchSetStage","dispatchSetPlayerAScore","dispatchSetPlayerBScore","dispatchClearPlayersData","dispatchClearScore","players","stage","playerAScore","playerBScore","playerForm","useState","gameOver","setGameOver","useEffect","handleContinue","validateFields","data","getFieldsValue","resetFields","form","name","rules","placeholder","onClick","playerA","disabled","playerB","Math","abs","PropTypes","mapStateToProps","createStructuredSelector","keeper","createSelector","substate","get","withConnect","connect","dispatch","keeperCreators","compose","KeeperTest","module","exports","transparent","text","primary","secondary","success","dark1","dark2","error","white","gray","whiteSmoke"],"mappings":"k8BAsCA,SApCoBA,QAAH,K,wHCDjB,IAAMC,EAA2B,iBAE3BC,EAAa,SAACC,EAAUC,EAAWC,GAAtB,oBAChBF,EAAWC,GADK,cAEjBC,GAFiB,GAMbC,EAAU,SAACA,EAASD,GAAV,OAAsBH,EAAW,UAAWI,EAASD,IAExDE,EAAkB,SAACC,EAAeC,GAAhB,MAAyC,EAH/CJ,EAIdG,EAJ0BN,EAAW,YAAY,EAAMG,IAKhEC,EAAQL,EAA0BQ,IALZ,IAACJ,G,6BCAnBK,EAAqB,SAACC,GAAD,OAAYA,EAAMC,QAAUC,MAAcC,Q,+YCPrE,IAKMC,EAAQ,CACZC,QALS,IAMTC,OALQ,IAMRC,OALO,KAQT,QAAeC,OAAOC,KAAKL,GAAOM,QAAO,SAACC,EAAKC,GAmB7C,OAlBAD,EAAIC,GAAS,CACXC,IAAK,SAACC,GAAD,OACHC,QAAG,IACoBX,EAAMQ,GAAS,IAChCG,QAAI,CAACD,KAGRE,KAAK,IACLC,QAAQ,IAAK,KAClBC,IAAK,SAACJ,GAAD,OACHC,QAAG,IACoBX,EAAMQ,GAAS,IAChCG,QAAI,CAACD,KAGRE,KAAK,IACLC,QAAQ,IAAK,MAEbN,IACN,I,+lBC5BH,IAqBMQ,EAAQ,kBAAMJ,QAAL,MAGTK,EAAM,kBAAML,QAAL,MAGPM,EAAQ,kBAAMN,QAAL,MAeTO,EAAS,kBAAMP,QAAL,MAyBhB,QAIII,EAJJ,EAKIC,EALJ,EAMIC,EANJ,EArCmB,kBAAMN,QAAL,MAqCpB,EApBgB,kBAAMA,QAAL,IACbM,IACAC,M,wlBC1CJ,IAAMC,GAAKC,QAAOC,IAAPD,CAAH,KAEF,SAACE,GAAD,OAAWA,EAAMC,OAAN,iBAAyBD,EAAMC,MAA/B,QAIJC,UACWA,YACAA,aAOxB,SAASC,EAAaH,GACpB,OAAO,gBAACH,EAAD,GAAIO,cAAa,iBAAqBJ,IAG/CG,EAAaE,UAAY,GAEzB,SAAeC,UAAKH,G,6qBCrBpB,IAAMI,IAAKT,QAAOU,IAAPV,CAAH,IAIgBI,UACAA,UAGlB,SAACF,GAAD,OAAWA,EAAMC,OAAN,iBAAyBD,EAAMC,MAA/B,QAMFC,UAKf,SAASO,GAAYT,GACnB,OAAO,gBAACO,GAAD,GAAIH,cAAa,gBAAoBJ,IAG9CS,GAAYJ,UAAY,GAExB,UAAeC,UAAKG,I,4wFCfpB,IAAMC,GAAUZ,SAAH,MAQPa,GAAmBb,SAAH,KAKAI,UAOlBU,EAAMjC,QAAQQ,IAAd,4CAKE0B,GAAMf,SAAH,MAGL,SAACE,GAAD,OAAYA,EAAMc,OAAN,2BAA4C,qCAItDC,IAAajB,QAAOkB,IAAPlB,CAAH,KAOVmB,KASAC,GAAcpB,OAAH,KAEbmB,GAGEE,GAAgBrB,OAAH,KAGfmB,KAGEG,GAAkBtB,OAAH,KAGjBmB,KAGEI,GAAmBvB,OAAH,KAGlBmB,KAGEK,GAAkBxB,OAAH,KAEjBmB,KAGG,SAAS1C,GAAT,GAWJ,IAVDgD,EAUC,EAVDA,mBACAC,EASC,EATDA,iBACAC,EAQC,EARDA,wBACAC,EAOC,EAPDA,wBACAC,EAMC,EANDA,yBACAC,EAKC,EALDA,mBACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,aACAC,EACC,EADDA,aAEOC,EADN,GACoBjB,cADpB,YAE+BkB,eAAS,GAFxC,GAEMC,EAFN,KAEgBC,EAFhB,MAGDC,gBAAU,WACa,KAAjBN,GAAwC,KAAjBC,GACzBI,GAAY,KAEb,CAACL,EAAcC,IAElB,IAAMM,EAAc,e,EAAA,G,EAAA,yBAAG,4HAEbL,EAAWM,iBAFE,OAGbC,EAAOP,EAAWQ,iBACxBlB,EAAmBiB,GACnBhB,EAAiB,GACjBS,EAAWS,cANQ,wG,iLAAH,qDAiBpB,OACE,gBAAChC,GAAD,KACE,gBAACC,GAAD,KACE,gBAACO,GAAD,mBACW,IAAVY,GACC,gBAACf,GAAD,CAAY4B,KAAMV,GAChB,gBAAC,SAAD,CAAWW,KAAK,UAAUC,MAAO3E,EAAgB,wBAAyB,sBACxE,gBAAC,GAAD,CAAa+B,MAAO,GAAIG,cAAY,QAAQ0C,YAAY,cAG1D,gBAAC,SAAD,CAAWF,KAAK,UAAUC,MAAO3E,EAAgB,wBAAyB,sBACxE,gBAAC,GAAD,CAAa+B,MAAO,GAAIG,cAAY,QAAQ0C,YAAY,cAE1D,gBAAC,EAAD,CAAc7C,MAAO,GAAI8C,QAAST,EAAgBlC,cAAY,OAA9D,aAKO,IAAV0B,GACC,gCACE,gBAACjB,GAAD,KACE,gBAACM,GAAD,KAAgBU,EAAQmB,SACxB,gBAAC,EAAD,CACE/C,MAAO,GACPgD,SAAUd,EACVY,QAAS,WACPtB,EAAwBM,EAAe,KAJ3C,YAUF,gBAAClB,GAAD,CAAKC,QAAM,GACT,gBAACQ,GAAD,cACA,gBAACD,GAAD,KAAmBU,IAErB,gBAAClB,GAAD,KACE,gBAACM,GAAD,KAAgBU,EAAQqB,SACxB,gBAAC,EAAD,CAAcjD,MAAO,GAAIgD,SAAUd,EAAUY,QAAS,kBAAMrB,EAAwBM,EAAe,KAAnG,YAIF,gBAACnB,GAAD,CAAKC,QAAM,GACT,gBAACQ,GAAD,cACA,gBAACD,GAAD,KAAmBW,IAErB,2BACA,gBAACnB,GAAD,KACE,gBAACS,GAAD,uBACA,gBAACF,GAAD,KAxDLW,GAAiBC,EAEXD,IAAiBC,EACnB,aAEFD,EAAeC,EAAeH,EAAQmB,QAAUnB,EAAQqB,QAJtD,WAyDD,gBAACrC,GAAD,KACE,gBAACS,GAAD,wBAAkC6B,KAAKC,IAAIrB,EAAeC,KAE3DG,GACC,gBAACtB,GAAD,KACE,gBAAC,EAAD,CACEZ,MAAO,GACP8C,QAAS,WACPX,GAAY,GACZR,MAJJ,cASA,gBAAC,EAAD,CACE3B,MAAO,GACP8C,QAAS,WACPX,GAAY,GACZT,MAJJ,iBAcV,gBAAC,EAAD,OAKNpD,GAAO8B,UAAY,CACjBkB,mBAAoB8B,SACpB7B,iBAAkB6B,SAClBxB,QAASwB,WACTvB,MAAOuB,WACPtB,aAAcsB,WACdrB,aAAcqB,WACd5B,wBAAyB4B,SACzB3B,wBAAyB2B,SACzB1B,yBAA0B0B,SAC1BzB,mBAAoByB,UAGtB,IAAMC,IAAkBC,QAAyB,CAC/CC,QL9N6BC,QAAepF,GAAoB,SAACqF,GAAD,OAAcA,KK+N9E7B,SL7NA4B,QAAepF,GAAoB,SAACqF,GAClC,MAAO,CACLV,QAASW,IAAID,EAAU,WACvBR,QAASS,IAAID,EAAU,eK2N3B5B,OLxN+B2B,QAAepF,GAAoB,SAACqF,GAAD,OAAcC,IAAID,EAAU,QAAS,MKyNvG3B,cLvNA0B,QAAepF,GAAoB,SAACqF,GAAD,OAAcC,IAAID,EAAU,eAAgB,MKwN/E1B,cLtNAyB,QAAepF,GAAoB,SAACqF,GAAD,OAAcC,IAAID,EAAU,eAAgB,QKgP3EE,IAAcC,QAAQP,IAvB5B,SAA4BQ,GAC1B,MAAO,CACLvC,mBAAoB,SAACiB,GACnBsB,EAASC,gBAA0BvB,KAErChB,iBAAkB,SAACgB,GACjBsB,EAASC,cAAwBvB,KAEnCf,wBAAyB,SAACe,GACxBsB,EAASC,qBAA+BvB,KAE1Cd,wBAAyB,SAACc,GACxBsB,EAASC,qBAA+BvB,KAE1Cb,yBAA0B,WACxBmC,EAASC,0BAEXnC,mBAAoB,WAClBkC,EAASC,wBAOf,UAAeC,QAAQJ,GAAvB,CAAoCrF,IAE7B,IAAM0F,IAAaD,UAAUzF,K,SC3OpC2F,EAAOC,QAdQ,CACbC,YAAa,gBAEbC,KAZW,UAaXC,QAdc,UAedC,UAbgB,UAchBC,QAXc,UAYdC,MAdY,UAeZC,MAdY,UAeZC,MAbY,UAcZC,MAbY,SAcZC,KAbW,UAcXC,WAbiB","file":"202.bundle.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n@import '~antd/dist/antd.css';\n  html,\n  body {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    @import url('https://fonts.googleapis.com/css2?family=Ubuntu&display=swap');\n    font-family: 'Ubuntu', sans-serif;\n  }\n\n  body.fontLoaded {\n    font-family: 'Ubuntu', sans-serif;\n  }\n\n  #app {\n    position: relative;\n    min-height: 100%;\n    min-width: 100%;\n  }\n\n  p,\n  h1,h2,h3,h4,h5,h6\n  span,\n  label,\n  button {\n    font-family: 'Ubuntu', sans-serif;\n    line-height: 1.5em;\n  }\n  \n`;\n\nexport default GlobalStyle;\n","// regex validation rules\nconst USERNAME_VALIDATION_RULE = /^[a-zA-Z0-9]+$/;\n// method which creates rules for antd input fields\nconst createRule = (ruleName, ruleValue, message) => ({\n  [ruleName]: ruleValue,\n  message\n});\n// field is required?\nexport const required = (message) => createRule('required', true, message);\nconst pattern = (pattern, message) => createRule('pattern', pattern, message);\n\nexport const isUserNameValid = (requiredMsgId, invalidFullnameMsgId) => [\n  required(requiredMsgId),\n  pattern(USERNAME_VALIDATION_RULE, invalidFullnameMsgId)\n];\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\nimport get from 'lodash/get';\n\n/**\n * Direct selector to the keeper state domain\n */\n\nconst selectKeeperDomain = (state) => (state.Keeper || initialState).toJS();\n\nconst makeSelectKeeper = () => createSelector(selectKeeperDomain, (substate) => substate);\nexport const selectPlayers = () =>\n  createSelector(selectKeeperDomain, (substate) => {\n    return {\n      playerA: get(substate, 'playerA'),\n      playerB: get(substate, 'playerB')\n    };\n  });\nexport const selectStage = () => createSelector(selectKeeperDomain, (substate) => get(substate, 'stage', 1));\nexport const selectPlayerAScore = () =>\n  createSelector(selectKeeperDomain, (substate) => get(substate, 'playerAScore', 0));\nexport const selectPlayerBScore = () =>\n  createSelector(selectKeeperDomain, (substate) => get(substate, 'playerBScore', 0));\n\nexport default makeSelectKeeper;\nexport { selectKeeperDomain };\n","import { css } from 'styled-components';\nconst ScreenSizes = {\n  DESKTOP: 992,\n  TABLET: 768,\n  PHONE: 320\n};\nconst sizes = {\n  desktop: ScreenSizes.DESKTOP,\n  tablet: ScreenSizes.TABLET,\n  mobile: ScreenSizes.PHONE\n};\n// iterate through sizes and create a media template\nexport default Object.keys(sizes).reduce((acc, label) => {\n  acc[label] = {\n    min: (args) =>\n      css`\n        @media (min-width: ${sizes[label] / 16}em) {\n          ${css([args])};\n        }\n      `\n        .join('')\n        .replace(' ', ''),\n    max: (args) =>\n      css`\n        @media (max-width: ${sizes[label] / 16}em) {\n          ${css([args])};\n        }\n      `\n        .join('')\n        .replace(' ', '')\n  };\n  return acc;\n}, {});\n","import { css } from 'styled-components';\nimport media from './media';\n\n// sizes\nconst dynamicFontSize = (font, desktopDelta = 0, tabletDelta = 0) => css`\n  ${font()}\n  ${media.tablet.min(\n    `font-size: ${\n      tabletDelta + parseInt(font()[0].replace('font-size:', '').replace('rem;', '').replace(/\\s+/g, ''))\n    }rem;`\n  )};\n  ${media.desktop.min(\n    `font-size: ${\n      desktopDelta + parseInt(font()[0].replace('font-size:', '').replace('rem;', '').replace(/\\s+/g, ''))\n    }rem;`\n  )};\n`;\n\nconst regular = () => css`\n  font-size: 1rem;\n`;\n\nconst xRegular = () => css`\n  font-size: 1.125rem;\n`;\nconst small = () => css`\n  font-size: 0.875rem;\n`;\nconst big = () => css`\n  font-size: 1.25rem;\n`;\nconst large = () => css`\n  font-size: 1.5rem;\n`;\nconst extraLarge = () => css`\n  font-size: 2rem;\n`;\n\n// weights\nconst light = () => css`\n  font-weight: light;\n`;\nconst bold = () => css`\n  font-weight: bold;\n`;\n\nconst normal = () => css`\n  font-weight: normal;\n`;\n\n// styles\nconst heading = () => css`\n  ${large()}\n  ${normal()}\n`;\n\nconst subheading = () => css`\n  ${big()}\n  ${light()}\n`;\n\nconst standard = () => css`\n  ${regular()}\n  ${normal()}\n`;\n\nconst subText = () => css`\n  ${small()}\n  ${normal()}\n`;\n\nexport default {\n  dynamicFontSize,\n  size: {\n    regular,\n    small,\n    big,\n    large,\n    extraLarge,\n    xRegular\n  },\n  style: {\n    heading,\n    subheading,\n    standard,\n    subText\n  },\n  weights: {\n    light,\n    bold,\n    normal\n  }\n};\n","/**\n *\n * CustomButton\n *\n */\n\nimport React, { memo } from 'react';\nimport { Button } from 'antd';\nimport styled from 'styled-components';\nimport { colors } from '../../themes/index';\n\nconst CB = styled(Button)`\n  &.ant-btn {\n    ${(props) => props.width && `width: ${props.width}%;`};\n    border-radius: 8px;\n    height: 2.75rem;\n    margin: 0.75rem 0;\n    color: ${colors.dark1};\n    background-color: ${colors.primary};\n    border: 2px solid ${colors.primary};\n  }\n  &.ant-btn:hover {\n    cursor: pointer;\n  }\n`;\n\nfunction CustomButton(props) {\n  return <CB data-testid={'custom-button'} {...props} />;\n}\n\nCustomButton.propTypes = {};\n\nexport default memo(CustomButton);\n","/**\n *\n * CustomInput\n *\n */\n\nimport React, { memo } from 'react';\nimport { Input } from 'antd';\nimport { colors } from '../../themes/index';\nimport styled from 'styled-components';\n\nconst CI = styled(Input)`\n  height: 2.5rem;\n  &.ant-input {\n    padding-left: 1rem;\n    background-color: ${colors.white};\n    border: 1px solid ${colors.gray};\n    width: 100%;\n    margin: 0.75rem 0;\n    ${(props) => props.width && `width: ${props.width}%;`};\n    border-radius: 8px;\n    &.ant-form-item-label {\n      font-size: 20px;\n    }\n    &::placeholder {\n      color: ${colors.gray};\n    }\n  }\n`;\n\nfunction CustomInput(props) {\n  return <CI data-testid={'custom-input'} {...props} />;\n}\n\nCustomInput.propTypes = {};\n\nexport default memo(CustomInput);\n","/**\n *\n * Keeper\n *\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { Form } from 'antd';\nimport styled from 'styled-components';\nimport GlobalStyle from '../../global-styles';\n\nimport { isUserNameValid } from '../../utils/validationUtils';\nimport makeSelectKeeper, { selectPlayers, selectStage, selectPlayerAScore, selectPlayerBScore } from './selectors';\nimport { colors, media, fonts } from '../../themes';\nimport { keeperCreators } from './reducer';\nimport CustomButton from '../../components/CustomButton';\nimport CustomInput from '../../components/CustomInput';\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  height: 100vh;\n  width: 100vw;\n`;\nconst SketchyContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-direction: column;\n  border: 3px solid ${colors.dark1};\n  width: 75%;\n  height: 85%;\n  border-radius: 4% 12% 10% 8% / 3% 3% 6% 10%;\n  background: #ffffff;\n  position: relative;\n  padding: 0 1rem;\n  ${media.desktop.min(`\n    width: 40%;\n    height: 85%;\n  `)}\n`;\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n  ${(props) => (props.center ? `justify-content: center;` : 'justify-content: space-between;')};\n\n  align-items: center;\n`;\nconst CustomForm = styled(Form)`\n  text-align: center;\n  width: 100%;\n  padding: 1rem;\n  .ant-legacy-form-explain {\n    margin-top: 0.5rem;\n    color: red;\n    ${fonts.size.small()};\n  }\n  & .ant-form-item-explain,\n  & .ant-form-item-extra {\n    text-align: left;\n    color: red;\n    font-size: 0.65rem;\n  }\n`;\nconst CustomTitle = styled.p`\n  text-transform: uppercase;\n  ${fonts.style.heading}\n  margin: 0;\n`;\nconst CustomBigName = styled.p`\n  text-transform: capitalize;\n  font-weight: 300;\n  ${fonts.size.big()}\n  margin: 0;\n`;\nconst CustomLargeText = styled.p`\n  text-transform: capitalize;\n  font-weight: 300;\n  ${fonts.size.large()}\n  margin: 0;\n`;\nconst CustomXLargeText = styled.p`\n  text-transform: capitalize;\n  font-weight: 300;\n  ${fonts.size.extraLarge()}\n  margin: 0;\n`;\nconst CustomSmallText = styled.p`\n  font-weight: 300;\n  ${fonts.size.small()}\n  margin: 0;\n`;\nexport function Keeper({\n  dispatchSetPlayers,\n  dispatchSetStage,\n  dispatchSetPlayerAScore,\n  dispatchSetPlayerBScore,\n  dispatchClearPlayersData,\n  dispatchClearScore,\n  players,\n  stage,\n  playerAScore,\n  playerBScore\n}) {\n  const [playerForm] = Form.useForm();\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    if (playerAScore === 11 || playerBScore === 11) {\n      setGameOver(true);\n    }\n  }, [playerAScore, playerBScore]);\n\n  const handleContinue = async () => {\n    try {\n      await playerForm.validateFields();\n      const data = playerForm.getFieldsValue();\n      dispatchSetPlayers(data);\n      dispatchSetStage(2);\n      playerForm.resetFields();\n    } catch (error) {}\n  };\n  const currentWinner = () => {\n    if (!playerAScore && !playerBScore) {\n      return 'No one';\n    } else if (playerAScore === playerBScore) {\n      return \"It's a tie\";\n    }\n    return playerAScore > playerBScore ? players.playerA : players.playerB;\n  };\n  return (\n    <Wrapper>\n      <SketchyContainer>\n        <CustomTitle>The Keeper</CustomTitle>\n        {stage === 1 && (\n          <CustomForm form={playerForm}>\n            <Form.Item name=\"playerA\" rules={isUserNameValid('Username is required!', 'Invalid Username!')}>\n              <CustomInput width={80} data-testid=\"input\" placeholder=\"Player A\" />\n            </Form.Item>\n\n            <Form.Item name=\"playerB\" rules={isUserNameValid('Username is required!', 'Invalid Username!')}>\n              <CustomInput width={80} data-testid=\"input\" placeholder=\"Player B\" />\n            </Form.Item>\n            <CustomButton width={85} onClick={handleContinue} data-testid=\"btn\">\n              Continue\n            </CustomButton>\n          </CustomForm>\n        )}\n        {stage === 2 && (\n          <>\n            <Row>\n              <CustomBigName>{players.playerA}</CustomBigName>\n              <CustomButton\n                width={25}\n                disabled={gameOver}\n                onClick={() => {\n                  dispatchSetPlayerAScore(playerAScore + 1);\n                }}\n              >\n                Add Win\n              </CustomButton>\n            </Row>\n            <Row center>\n              <CustomSmallText>Wins:</CustomSmallText>\n              <CustomXLargeText>{playerAScore}</CustomXLargeText>\n            </Row>\n            <Row>\n              <CustomBigName>{players.playerB}</CustomBigName>\n              <CustomButton width={25} disabled={gameOver} onClick={() => dispatchSetPlayerBScore(playerBScore + 1)}>\n                Add Win\n              </CustomButton>\n            </Row>\n            <Row center>\n              <CustomSmallText>Wins:</CustomSmallText>\n              <CustomXLargeText>{playerBScore}</CustomXLargeText>\n            </Row>\n            <hr />\n            <Row>\n              <CustomSmallText>Current Winner</CustomSmallText>\n              <CustomLargeText>{currentWinner()}</CustomLargeText>\n            </Row>\n            <Row>\n              <CustomSmallText>Win Difference: {Math.abs(playerAScore - playerBScore)}</CustomSmallText>\n            </Row>\n            {gameOver && (\n              <Row>\n                <CustomButton\n                  width={45}\n                  onClick={() => {\n                    setGameOver(false);\n                    dispatchClearScore();\n                  }}\n                >\n                  Play Again\n                </CustomButton>\n                <CustomButton\n                  width={45}\n                  onClick={() => {\n                    setGameOver(false);\n                    dispatchClearPlayersData();\n                  }}\n                >\n                  Start Over\n                </CustomButton>\n              </Row>\n            )}\n          </>\n        )}\n      </SketchyContainer>\n      <GlobalStyle />\n    </Wrapper>\n  );\n}\n\nKeeper.propTypes = {\n  dispatchSetPlayers: PropTypes.func,\n  dispatchSetStage: PropTypes.func,\n  players: PropTypes.object,\n  stage: PropTypes.number,\n  playerAScore: PropTypes.number,\n  playerBScore: PropTypes.number,\n  dispatchSetPlayerAScore: PropTypes.func,\n  dispatchSetPlayerBScore: PropTypes.func,\n  dispatchClearPlayersData: PropTypes.func,\n  dispatchClearScore: PropTypes.func\n};\n\nconst mapStateToProps = createStructuredSelector({\n  keeper: makeSelectKeeper(),\n  players: selectPlayers(),\n  stage: selectStage(),\n  playerAScore: selectPlayerAScore(),\n  playerBScore: selectPlayerBScore()\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatchSetPlayers: (data) => {\n      dispatch(keeperCreators.setPlayers(data));\n    },\n    dispatchSetStage: (data) => {\n      dispatch(keeperCreators.setStage(data));\n    },\n    dispatchSetPlayerAScore: (data) => {\n      dispatch(keeperCreators.setPlayerAScore(data));\n    },\n    dispatchSetPlayerBScore: (data) => {\n      dispatch(keeperCreators.setPlayerBScore(data));\n    },\n    dispatchClearPlayersData: () => {\n      dispatch(keeperCreators.clearPlayersData());\n    },\n    dispatchClearScore: () => {\n      dispatch(keeperCreators.clearScore());\n    }\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect)(Keeper);\n\nexport const KeeperTest = compose()(Keeper);\n","/**\n * This file contains the application's colors.\n *\n * Define color here instead of duplicating them throughout the components.\n * That allows to change them more easily later on.\n */\n\nconst primary = '#00C4CC';\nconst text = '#212529';\nconst secondary = '#f0f0f0';\nconst dark1 = '#333333';\nconst dark2 = '#353535';\nconst success = '#28a745';\nconst error = '#dc3545';\nconst white = '#fffff';\nconst gray = '#A9A9A9';\nconst whiteSmoke = '#f5f5f5';\nconst colors = {\n  transparent: 'rgba(0,0,0,0)',\n  // Example colors:\n  text,\n  primary,\n  secondary,\n  success,\n  dark1,\n  dark2,\n  error,\n  white,\n  gray,\n  whiteSmoke\n};\nmodule.exports = colors;\n"],"sourceRoot":""}